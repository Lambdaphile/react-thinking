{"version":3,"sources":["components/SearchBar.js","components/ProductCategoryRow.js","components/ProductRow.js","components/ProductTable.js","components/FilterableProductTable.js","components/App.js","serviceWorker.js","index.js"],"names":["StyledSearchBar","styled","form","TextInput","input","SearchBar","props","handleFilterTextChange","bind","handleInStockChange","e","this","onFilterTextChange","target","value","onInStockChange","checked","filterText","inStockOnly","type","placeholder","onChange","React","Component","Th","th","ProductCategoryRow","category","colSpan","Td","td","ProductRow","product","name","stocked","style","color","price","Table","table","ProductTable","rows","lastCategory","products","forEach","indexOf","push","key","StyledFilteredProductTable","section","FilterableProductTable","state","setState","App","Fragment","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4cf292cb.chunk.js","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\n\nconst StyledSearchBar = styled.form`\n  border: 2px solid #fab57a;\n  margin: 5px;\n  padding: 5px;\n`;\n\nconst TextInput = styled.input`\n  display: block;\n  margin-bottom: 5px;\n  width: 220px;\n`;\n\nexport default class SearchBar extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleFilterTextChange = this.handleFilterTextChange.bind(this);\n    this.handleInStockChange = this.handleInStockChange.bind(this);\n  }\n\n  handleFilterTextChange(e) {\n    this.props.onFilterTextChange(e.target.value);\n  }\n\n  handleInStockChange(e) {\n    this.props.onInStockChange(e.target.checked);\n  }\n\n  render() {\n    const filterText = this.props.filterText;\n    const inStockOnly = this.props.inStockOnly;\n\n    return (\n      <StyledSearchBar>\n        <TextInput\n          type='text'\n          placeholder='Search...'\n          value={filterText}\n          onChange={this.handleFilterTextChange}\n        />\n        <label>\n          <input\n            type='checkbox'\n            checked={inStockOnly}\n            onChange={this.handleInStockChange}\n          />\n          {' '}Only show products in stock\n        </label>\n      </StyledSearchBar>\n    );\n  }\n}\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst Th = styled.th`\n  border-bottom: 2px solid #b7e778;\n  border-top: 2px solid #b7e778;\n  text-align: left;\n`;\n\nexport default class ProductCategoryRow extends React.Component {\n  render() {\n    const category = this.props.category;\n    return (\n      <tr>\n          <Th colSpan='2'>{category}</Th>\n      </tr>\n    );\n  }\n}","import React from 'react';\nimport styled from 'styled-components';\n\nconst Td = styled.td`\n  border-bottom: 2px solid #80d6ff;\n  border-top: 2px solid #80d6ff;\n`;\n\nexport default class ProductRow extends React.Component {\n  render() {\n    const product = this.props.product;\n    const name = product.stocked ?\n      product.name : \n      <span style={{color: 'red'}}>\n        {product.name}\n      </span>;\n\n    return (\n      <tr>\n        <Td>{name}</Td>\n        <Td>{product.price}</Td>\n      </tr>\n    );\n  }\n}","import React from 'react';\nimport ProductCategoryRow from './ProductCategoryRow';\nimport ProductRow from './ProductRow';\nimport styled from 'styled-components';\n\nconst Table = styled.table`\n  border: 2px solid #fab57a;\n  margin: 5px;\n  padding: 5px;\n  position: relative;\n`;\n\nconst Th = styled.th`\n  text-align: left;\n  width: 150px;\n`;\n\nexport default class ProductTable extends React.Component {\n  render() {\n    const filterText = this.props.filterText;\n    const inStockOnly = this.props.inStockOnly;\n\n    let rows = [];\n    let lastCategory = null;\n\n    this.props.products.forEach(product => {\n      if (inStockOnly && !product.stocked) return;\n      if (product.name.indexOf(filterText) === -1) return;\n      if (product.category !== lastCategory ) {\n        rows.push(\n          <ProductCategoryRow\n            category={product.category}\n            key={product.category}\n          />\n        );\n      }\n      rows.push(\n        <ProductRow\n          product={product}\n          key={product.name}\n        />\n      );\n      lastCategory = product.category;\n    });\n\n    return (\n      <Table>\n        <thead>\n          <tr>\n            <Th>Name</Th>\n            <Th>Price</Th>\n          </tr>\n        </thead>\n        <tbody>{rows}</tbody>\n      </Table>\n    );\n  }\n}","import React from 'react';\nimport SearchBar from './SearchBar';\nimport ProductTable from './ProductTable';\nimport styled from 'styled-components';\n\nconst StyledFilteredProductTable = styled.section`\n  border: 2px solid #f06868;\n  display: inline-block;\n  font-family: Helvetica;\n  padding: 5px;\n`;\n\nexport default class FilterableProductTable extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      filterText: '',\n      inStockOnly: false,\n    }\n    this.handleFilterTextChange = this.handleFilterTextChange.bind(this);\n    this.handleInStockChange = this.handleInStockChange.bind(this);\n  }\n\n  handleFilterTextChange(filterText) {\n    this.setState({\n      filterText: filterText\n    });\n  }\n\n  handleInStockChange(inStockOnly) {\n    this.setState({\n      inStockOnly: inStockOnly\n    });\n  }\n  \n  render() {\n    return (\n      <StyledFilteredProductTable>\n        <SearchBar \n          filterText={this.state.filterText}\n          inStockOnly={this.state.inStockOnly}\n          onInStockChange={this.handleInStockChange}\n          onFilterTextChange={this.handleFilterTextChange}\n        />\n        <ProductTable \n          products={this.props.products}\n          filterText={this.state.filterText}\n          inStockOnly={this.state.inStockOnly}\n        />\n      </StyledFilteredProductTable>\n    );\n  }\n}","import React from 'react';\nimport FilterableProductTable from './FilterableProductTable';\n\nconst products = [\n  { category: \"Sporting Goods\", price: \"$49.99\", stocked: true, name: \"Football\" },\n  { category: \"Sporting Goods\", price: \"$9.99\", stocked: true, name: \"Baseball\" },\n  { category: \"Sporting Goods\", price: \"$29.99\", stocked: false, name: \"Basketball\" },\n  { category: \"Electronics\", price: \"$99.99\", stocked: true, name: \"iPod Touch\" },\n  { category: \"Electronics\", price: \"$399.99\", stocked: false, name: \"iPhone 5\" },\n  { category: \"Electronics\", price: \"$199.99\", stocked: true, name: \"Nexus 7\" }\n];\n\nfunction App() {\n  return (\n    <React.Fragment>\n      <FilterableProductTable\n        products={products}\n      />\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}